#!/usr/bin/env node
import http from 'http';
import app from '../src/app'

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    const port = parseInt(val, 10);
    if (isNaN(port)) {
        // named pipe
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }
    return false;
}
/**
 * Get port from environment and store in Express.
 */
// console.log(process.env.PORT);
const port = normalizePort(process.env.PORT || '3000');

const server = http.createServer(app.callback());

server.listen(port)
server.on('error', (error) => {
    // console.log(error);
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? `Pipe  ${port}`
        : `Port  ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.log(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.log(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
});


server.on('listening', () => {
    const addr = server.address();
    console.log(addr)
    const bind = typeof addr === 'string'
        ? `pipe ${addr}`
        : `port ${addr.port}`;
    // logUtil.info('server start at time: ' + Date().toLocaleString())

    console.log(`Listening on ${bind}`)
})

